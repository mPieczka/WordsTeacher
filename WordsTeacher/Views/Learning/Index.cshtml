@model List<int>
<div class="d-flex" style="height: 80vh">
    <div class="card index-card" style="margin: auto; width: 400px;min-height: 200px;">
        <div class="card-header center">
            <span id="index-card-switch-sides">
                <i class="fas fa-sync float-left"></i>
            </span>
            <span class="index-card-correct clickable-icon">
                <i class="fas fa-check"></i>
            </span>
            <span class="index-card-incorrect clickable-icon">
                <i class="fas fa-times"></i>
            </span>
            <span id="index-card-next">
                <i class="fas fa-arrow-right float-right"></i>
            </span>
        </div>
        <div class="card-body index-card-front active">
            <div class="center">
            </div>
        </div>
        <div class="card-body index-card-back">
            <div class="center">
            </div>
        </div>
    </div>
</div>
<script id="index-card-front-template" type="text/x-handlebars-template">
    <div class="center">
        <span class="clickable-icon" id="phrase-audio-button">
            <i class="fas fa-volume-up"></i>
        </span>
        <p>
            <h2>{{basePhrase}}</h2>
        </p>
        {{#if basePhrasePronunciation}}
        <p>[{{basePhrasePronunciation}}]</p>
        {{/if}}
    </div>
</script>
<script id="index-card-back-template" type="text/x-handlebars-template">
    <div class="center">
        <p>
            <h2>{{translatedPhrase}}</h2>
        </p>
        {{#if translationPronunciation}}
        <p>[{{translationPronunciation}}]</p>
        {{/if}}
    </div>
</script>

<script>
    let phraseIds = [@string.Join(", ",Model)];
    let currentPhraseId;

    $(() => {
        GetNextPhrase();

        $("#index-card-switch-sides").click((e) => {
            $(".index-card .card-body").toggleClass("active");
            PlaySound();
        });

        $(".index-card-correct").click((e) => {
            SetPhraseState(true);
        });

        $(".index-card-incorrect").click((e) => {
            SetPhraseState(false);
        });

        $("#index-card-next").click((e) => {
            GetNextPhrase();
        })
    })

    function GetNextPhrase() {
        SetNextPhrase();
        if (currentPhraseId) {
            $.ajax({
                url: "@Url.Action("Details","Phrase")",
                method: "POST",
                data: { id: currentPhraseId },
                success: (response) => {
                    PlaySound();

                    $(".index-card .index-card-front").html(
                        (Handlebars.compile($("#index-card-front-template").html()))(response)
                    );
                    $(".index-card .index-card-back").html(
                        (Handlebars.compile($("#index-card-back-template").html()))(response)
                    );
                    $("#phrase-audio-button").click((e) => {
                        PlaySound();
                    })
                }
            })
        }
        else {
            window.location = "@Url.Action("Index", "Phrase")"
        }

    }

    function PlaySound() {
        if ($(".index-card-front.active").length) {
            var audio = new Audio(`@Url.Action("GetPhraseAudio","Phrase")?phraseId=${currentPhraseId}`);
            audio.addEventListener("canplaythrough", event => {
                audio.play();

            });
        }
    }

    function SetPhraseState(correct) {
        $.ajax({
            url: "@Url.Action("SetPhraseLearningState", "Phrase")",
            method: "POST",
            data: { id: currentPhraseId, correct},
            success: (response) => {
                phraseIds = phraseIds.filter((value) => value != currentPhraseId);
                GetNextPhrase();
            }
        })
    }

    function SetNextPhrase() {
        let currentElementIndex = phraseIds.findIndex((obj, index) => obj == currentPhraseId);
        if (currentPhraseId && currentElementIndex > -1) {
            currentPhraseId = currentElementIndex == (phraseIds.length - 1) ?
                phraseIds[0] : phraseIds[currentElementIndex + 1];
        }
        else {
            currentPhraseId = phraseIds[0];
        }
    }
</script>

@section scripts{
    <script src="~/lib/node_modules/handlebars/dist/handlebars.min.js"></script>
}